{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Run for Your Life</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Run for Your Life</h1>\n        <canvas id=\"gameCanvas\" width=\"800\" height=\"400\"></canvas>\n        <div id=\"output\">Say \"up\", \"down\", \"left\", or \"right\"</div>\n        <div id=\"score\">Score: 0</div>\n        <button id=\"startListening\">Start Listening</button>\n        <button id=\"stopListening\" disabled>Stop Listening</button>\n        <div id=\"instructions\">Instructions: Use voice commands to control your character. Say \"up\", \"down\", \"left\", or \"right\".</div>\n        <div class=\"touch-controls\"></div>\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "status": "",
      "output": "\n\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Run for Your Life</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n\n\n    <div class=\"container\">\n        <h1>Run for Your Life</h1>\n        <canvas id=\"gameCanvas\" width=\"800\" height=\"400\"></canvas>\n        <div id=\"output\">You said: noise is there | Command not recognized. | Game Over! | Stopped listening. | Game Over! | Stopped listening. | Game Over! | Stopped listening.</div>\n        <div id=\"score\">Score: 2</div>\n        <button id=\"startListening\">Start Listening</button>\n        <button id=\"stopListening\" disabled=\"\">Stop Listening</button>\n        <div id=\"instructions\">Instructions: Use voice commands to control your character. Say \"up\", \"down\", \"left\", or \"right\".</div>\n        <div class=\"touch-controls\"><button class=\"touch-button\">Up</button><button class=\"touch-button\">Down</button><button class=\"touch-button\">Left</button><button class=\"touch-button\">Right</button></div>\n    </div>\n    <script src=\"script.js\"></script>\n\n",
      "type": "html"
    },
    {
      "code": "const canvas = document.getElementById('gameCanvas');\nconst ctx = canvas.getContext('2d');\nconst output = document.getElementById('output');\nconst startListeningButton = document.getElementById('startListening');\nconst stopListeningButton = document.getElementById('stopListening');\nconst scoreDisplay = document.getElementById('score');\n\nlet recognition;\nlet character = {\n    x: canvas.width / 2,\n    y: canvas.height - 60,\n    width: 40,\n    height: 40,\n};\nlet obstacles = [];\nlet score = 0;\nlet gameOver = false;\nlet voiceLoopInterval;\n\n// Sound effects\nconst jumpSound = new Audio('jump.mp3'); // Add your jump sound file\nconst crashSound = new Audio('crash.wav'); // Add your crash sound file\nconst confirmationSound = new Audio('confirmation.mp3'); // Add your confirmation sound file\n\nif (!('webkitSpeechRecognition' in window)) {\n    alert(\"Sorry, your browser does not support speech recognition.\");\n} else {\n    recognition = new webkitSpeechRecognition();\n    \n    recognition.continuous = false; // Stop after each result to allow manual restarting\n    recognition.interimResults = false;\n\n    recognition.onresult = function(event) {\n        const command = event.results[0][0].transcript.toLowerCase().trim();\n        confirmCommand(command);\n        handleCommand(command);\n    };\n\n    recognition.onerror = function(event) {\n        console.error(\"Speech recognition error detected:\", event.error);\n        output.innerText = \"Error recognizing command.\";\n    };\n\n    recognition.onend = function() {\n        // Restart recognition after a delay to create a loop\n        if (!gameOver) {\n            setTimeout(() => recognition.start(), 1000); // 1-second interval\n        }\n    };\n}\n\nfunction confirmCommand(command) {\n    confirmationSound.play();\n    output.innerText = `You said: ${command}`;\n}\n\nfunction handleCommand(command) {\n    let moveDistance = 10; // Slow down movement for voice input\n\n    switch (command) {\n        case 'up':\n            character.y -= moveDistance;\n            jumpSound.play();\n            break;\n        case 'down':\n            character.y += moveDistance;\n            jumpSound.play();\n            break;\n        case 'left':\n            character.x -= moveDistance;\n            jumpSound.play();\n            break;\n        case 'right':\n            character.x += moveDistance;\n            jumpSound.play();\n            break;\n        case 'up.':\n            character.y -= moveDistance;\n            jumpSound.play();\n            break;\n        case 'down.':\n            character.y += moveDistance;\n            jumpSound.play();\n            break;\n        case 'left.':\n            character.x -= moveDistance;\n            jumpSound.play();\n            break;\n        case 'right.':\n            character.x += moveDistance;\n            jumpSound.play();\n            break;\n            case 'go up.':\n                character.y -= moveDistance;\n                jumpSound.play();\n                break;\n            case 'go down.':\n                character.y += moveDistance;\n                jumpSound.play();\n                break;\n            case 'go left.':\n                character.x -= moveDistance;\n                jumpSound.play();\n                break;\n            case 'go right.':\n                character.x += moveDistance;\n                jumpSound.play();\n                break;\n            case 'go up':\n                character.y -= moveDistance;\n                jumpSound.play();\n                break;\n            case 'go down':\n                character.y += moveDistance;\n                jumpSound.play();\n                break;\n            case 'go left':\n                character.x -= moveDistance;\n                jumpSound.play();\n                break;\n            case 'go right':\n                character.x += moveDistance;\n                jumpSound.play();\n                break;\n            case 'two step up':\n                character.y -= 2*moveDistance;\n                jumpSound.play();\n                break;\n            case 'two step down':\n                character.y += 2*moveDistance;\n                jumpSound.play();\n                break;\n            case 'two step left':\n                character.x -= 2*moveDistance;\n                jumpSound.play();\n                break;\n            case 'two step right':\n                character.x += 2*moveDistance;\n                jumpSound.play();\n                break;\n        default:\n            output.innerText += ' | Command not recognized.';\n            break;\n    }\n    \n    // Keep the character within bounds\n    if (character.x < 0) character.x = 0;\n    if (character.x + character.width > canvas.width) character.x = canvas.width - character.width;\n    if (character.y < 0) character.y = 0; \n    if (character.y + character.height > canvas.height) character.y = canvas.height - character.height;\n\n    drawCharacter();\n}\n\n// Keyboard controls (unchanged)\ndocument.addEventListener('keydown', function(event) {\n    let moveDistance = 20; // Normal movement for keyboard input\n    switch (event.key) {\n        case 'ArrowUp':\n        case 'w':\n            character.y -= moveDistance;\n            jumpSound.play();\n            break;\n        case 'ArrowDown':\n        case 's':\n            character.y += moveDistance;\n            jumpSound.play();\n            break;\n        case 'ArrowLeft':\n        case 'a':\n            character.x -= moveDistance;\n            jumpSound.play();\n            break;\n        case 'ArrowRight':\n        case 'd':\n            character.x += moveDistance;\n            jumpSound.play();\n            break;\n        default:\n            break;\n    }\n\n    // Keep the character within bounds after manual control\n    if (character.x < 0) character.x = 0;\n    if (character.x + character.width > canvas.width) character.x = canvas.width - character.width;\n    if (character.y < 0) character.y = 0; \n    if (character.y + character.height > canvas.height) character.y = canvas.height - character.height;\n\n    drawCharacter();\n});\n\nfunction drawCharacter() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas\n\n    ctx.fillStyle = 'cyan';\n    ctx.fillRect(character.x, character.y, character.width, character.height);\n\n    drawObstacles();\n}\n\nfunction drawObstacles() {\n    obstacles.forEach(obstacle => {\n        ctx.fillStyle = obstacle.color;\n        ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);\n        if (obstacle.direction) {\n            obstacle.x += obstacle.direction * 1; // Slower obstacle speed\n            if (obstacle.x <= 0 || obstacle.x + obstacle.width >= canvas.width) {\n                obstacle.direction *= -1;\n            }\n        }\n    });\n}\n\nfunction generateObstacle() {\n    const obstacleWidth = Math.random() * (100 - 30) + 30;\n    const obstacleHeight = Math.random() * (50 - 20) + 20;\n    const xPosition = Math.random() * (canvas.width - obstacleWidth);\n\n    const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple'];\n    const randomColor = colors[Math.floor(Math.random() * colors.length)];\n\n    obstacles.push({\n        x: xPosition,\n        y: -obstacleHeight,\n        width: obstacleWidth,\n        height: obstacleHeight,\n        direction: Math.random() < 0.5 ? -1 : 1,\n        color: randomColor\n    });\n}\n\nfunction updateObstacles() {\n    for (let i = obstacles.length - 1; i >= 0; i--) {\n        obstacles[i].y += 3; // Slow down obstacle drop speed\n\n        if (\n            character.x < obstacles[i].x + obstacles[i].width &&\n            character.x + character.width > obstacles[i].x &&\n            character.y < obstacles[i].y + obstacles[i].height &&\n            character.y + character.height > obstacles[i].y\n        ) {\n            crashSound.play();\n            output.innerText += \" | Game Over!\";\n            gameOver = true;\n            stopListening();\n            return;\n        }\n\n        if (obstacles[i].y > canvas.height) {\n            obstacles.splice(i, 1);\n            score++;\n            scoreDisplay.innerText = `Score: ${score}`;\n        }\n    }\n}\n\nfunction gameLoop() {\n    if (!gameOver) {\n        drawCharacter();\n        updateObstacles();\n        requestAnimationFrame(gameLoop);\n    }\n}\n\nfunction startListening() {\n    output.innerText = \"Listening...\";\n    generateObstacle();\n    setInterval(generateObstacle, 2000);\n\n    gameLoop();\n    recognition.start();\n}\n\nfunction stopListening() {\n    recognition.stop();\n    clearInterval(voiceLoopInterval);\n    output.innerText += \" | Stopped listening.\";\n    \n    if (gameOver) {\n        alert(`Game Over! Your final score is ${score}.`);\n        resetGame();\n    }\n}\n\nfunction resetGame() {\n    character.y = canvas.height - 60;\n    character.x = canvas.width / 2;\n    obstacles = [];\n    score = 0;\n    scoreDisplay.innerText = `Score: ${score}`;\n    gameOver = false;\n}\n\n// Create touch controls for mobile devices\nfunction createTouchControls() {\n    const touchControlsDiv = document.querySelector('.touch-controls');\n\n    const directions = ['Up', 'Down', 'Left', 'Right'];\n    \n    directions.forEach(direction => {\n        const button = document.createElement('button');\n        button.className = 'touch-button';\n        button.innerText = direction;\n\n        button.onclick = function() {\n            handleCommand(direction.toLowerCase());\n        };\n\n        touchControlsDiv.appendChild(button);\n    });\n}\n\n// Set up event listeners for buttons\nstartListeningButton.addEventListener('click', startListening);\nstopListeningButton.addEventListener('click', stopListening);\n\n// Initialize touch controls when needed\ncreateTouchControls();\n\ndrawCharacter();\n",
      "status": "[2]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "<style>\n  body {\n    font-family: Arial, sans-serif;\n    background-image: url('images/vibrant-background.jpg'); /* Path to your vibrant background image */\n    background-size: cover; /* Cover the entire body */\n    background-repeat: no-repeat; /* Do not repeat the image */\n    background-attachment: fixed; /* Keep the background fixed during scrolling */\n    text-align: center;\n    color: #fff; /* Change default text color for contrast */\n}\n\n.container {\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-gap: 20px; /* Space between grid items */\n    width: 80%;\n    margin: auto;\n    padding: 20px;\n    background-color: rgba(0, 0, 0, 0.5); /* Slightly transparent background */\n    border-radius: 15px; /* Rounded corners for the container */\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.3); /* Soft shadow effect */\n}\n\n#gameCanvas {\n    display: grid;\n    grid-template-columns: repeat(10, 1fr); /* Creates 10 equally spaced vertical lines */\n    height: 400px; /* Set the height of the canvas */\n    background-color: rgba(255, 255, 255, 0.9); /* Background for visibility */\n    border-radius: 10px;\n    border: 2px solid #333;\n    overflow: hidden;\n}\n\n#gameCanvas div {\n    background-color: #ff5733; /* Base color */\n    animation: colorChange 3s linear infinite alternate; /* Color-changing animation */\n}\n\n#gameCanvas div:nth-child(2) {\n    background-color: #33c1ff;\n}\n\n#gameCanvas div:nth-child(3) {\n    background-color: #33ff57;\n}\n\n#gameCanvas div:nth-child(4) {\n    background-color: #ff33f5;\n}\n\n#gameCanvas div:nth-child(5) {\n    background-color: #ffd700;\n}\n\n#gameCanvas div:nth-child(6) {\n    background-color: #ff5733;\n}\n\n#gameCanvas div:nth-child(7) {\n    background-color: #33c1ff;\n}\n\n#gameCanvas div:nth-child(8) {\n    background-color: #33ff57;\n}\n\n#gameCanvas div:nth-child(9) {\n    background-color: #ff33f5;\n}\n\n#gameCanvas div:nth-child(10) {\n    background-color: #ffd700;\n}\n\n@keyframes colorChange {\n    0% {\n        opacity: 1;\n    }\n    100% {\n        opacity: 0.6;\n    }\n}\n\n#output,\n#score,\n#instructions {\n    font-size: 24px;\n    color: #ffc107; /* Bright color */\n    background-color: rgba(0, 0, 0, 0.6);\n    padding: 10px;\n    border-radius: 10px;\n}\n\nbutton {\n    padding: 10px 15px;\n    margin: 10px;\n    background-color: #17a2b8; /* Light blue */\n    color: white;\n    border: none;\n    border-radius: 5px; /* Rounded corners */\n    cursor: pointer;\n    transition: background-color 0.3s;\n}\n\nbutton:hover {\n    background-color: #138496; /* Darker shade */\n}\n\nbutton:disabled {\n    background-color: #6c757d; /* Gray for disabled state */\n}\n\n.touch-controls {\n    display: flex;\n    justify-content: center;\n    margin-top: 20px;\n    gap: 10px;\n}\n\n.touch-button {\n    padding: 10px;\n    margin: 5px;\n    background-color: #007bff; /* Button color */\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n.touch-button:hover {\n    background-color: #0056b3; /* Darker shade */\n}\n\n  </style>",
      "status": "",
      "output": "<style>\n  body {\n    font-family: Arial, sans-serif;\n    background-image: url('images/vibrant-background.jpg'); /* Path to your vibrant background image */\n    background-size: cover; /* Cover the entire body */\n    background-repeat: no-repeat; /* Do not repeat the image */\n    background-attachment: fixed; /* Keep the background fixed during scrolling */\n    text-align: center;\n    color: #fff; /* Change default text color for contrast */\n}\n\n.container {\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-gap: 20px; /* Space between grid items */\n    width: 80%;\n    margin: auto;\n    padding: 20px;\n    background-color: rgba(0, 0, 0, 0.5); /* Slightly transparent background */\n    border-radius: 15px; /* Rounded corners for the container */\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.3); /* Soft shadow effect */\n}\n\n#gameCanvas {\n    display: grid;\n    grid-template-columns: repeat(10, 1fr); /* Creates 10 equally spaced vertical lines */\n    height: 400px; /* Set the height of the canvas */\n    background-color: rgba(255, 255, 255, 0.9); /* Background for visibility */\n    border-radius: 10px;\n    border: 2px solid #333;\n    overflow: hidden;\n}\n\n#gameCanvas div {\n    background-color: #ff5733; /* Base color */\n    animation: colorChange 3s linear infinite alternate; /* Color-changing animation */\n}\n\n#gameCanvas div:nth-child(2) {\n    background-color: #33c1ff;\n}\n\n#gameCanvas div:nth-child(3) {\n    background-color: #33ff57;\n}\n\n#gameCanvas div:nth-child(4) {\n    background-color: #ff33f5;\n}\n\n#gameCanvas div:nth-child(5) {\n    background-color: #ffd700;\n}\n\n#gameCanvas div:nth-child(6) {\n    background-color: #ff5733;\n}\n\n#gameCanvas div:nth-child(7) {\n    background-color: #33c1ff;\n}\n\n#gameCanvas div:nth-child(8) {\n    background-color: #33ff57;\n}\n\n#gameCanvas div:nth-child(9) {\n    background-color: #ff33f5;\n}\n\n#gameCanvas div:nth-child(10) {\n    background-color: #ffd700;\n}\n\n@keyframes colorChange {\n    0% {\n        opacity: 1;\n    }\n    100% {\n        opacity: 0.6;\n    }\n}\n\n#output,\n#score,\n#instructions {\n    font-size: 24px;\n    color: #ffc107; /* Bright color */\n    background-color: rgba(0, 0, 0, 0.6);\n    padding: 10px;\n    border-radius: 10px;\n}\n\nbutton {\n    padding: 10px 15px;\n    margin: 10px;\n    background-color: #17a2b8; /* Light blue */\n    color: white;\n    border: none;\n    border-radius: 5px; /* Rounded corners */\n    cursor: pointer;\n    transition: background-color 0.3s;\n}\n\nbutton:hover {\n    background-color: #138496; /* Darker shade */\n}\n\nbutton:disabled {\n    background-color: #6c757d; /* Gray for disabled state */\n}\n\n.touch-controls {\n    display: flex;\n    justify-content: center;\n    margin-top: 20px;\n    gap: 10px;\n}\n\n.touch-button {\n    padding: 10px;\n    margin: 5px;\n    background-color: #007bff; /* Button color */\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n.touch-button:hover {\n    background-color: #0056b3; /* Darker shade */\n}\n\n  </style>",
      "type": "html"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}